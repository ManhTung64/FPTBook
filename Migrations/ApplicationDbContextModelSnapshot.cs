// <auto-generated />
using System;
using FPTBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FPTBook.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FPTBook.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("FPTBook.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Manh Tung",
                            CategoryId = 3,
                            Image = "sth.png",
                            Page = 99,
                            Price = 199.0,
                            Publisher = "Manh Tung",
                            Quantity = 5,
                            Title = "How to have megakill",
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            Author = "Manh Tung",
                            CategoryId = 2,
                            Image = "st.png",
                            Page = 49,
                            Price = 195.0,
                            Publisher = "Manh Tung",
                            Quantity = 10,
                            Title = "How to defeat",
                            Year = 2020
                        },
                        new
                        {
                            Id = 3,
                            Author = "Manh Tung",
                            CategoryId = 1,
                            Image = "sth.png",
                            Page = 49,
                            Price = 195.0,
                            Publisher = "Manh Tung",
                            Quantity = 10,
                            Title = "You are mine",
                            Year = 2019
                        },
                        new
                        {
                            Id = 4,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op1.jpg",
                            Page = 200,
                            Price = 2.1899999999999999,
                            Publisher = "Eichiro Oda",
                            Quantity = 15,
                            Title = "One piece vol 1",
                            Year = 1997
                        },
                        new
                        {
                            Id = 5,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op2.jpg",
                            Page = 200,
                            Price = 2.9900000000000002,
                            Publisher = "Eichiro Oda",
                            Quantity = 15,
                            Title = "One piece vol 10",
                            Year = 1998
                        },
                        new
                        {
                            Id = 6,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op3.jpg",
                            Page = 200,
                            Price = 2.0899999999999999,
                            Publisher = "Eichiro Oda",
                            Quantity = 15,
                            Title = "One piece vol 15",
                            Year = 1999
                        },
                        new
                        {
                            Id = 7,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op4.jpg",
                            Page = 200,
                            Price = 1.99,
                            Publisher = "Eichiro Oda",
                            Quantity = 7,
                            Title = "One piece vol 16",
                            Year = 1999
                        },
                        new
                        {
                            Id = 8,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op5.jpg",
                            Page = 200,
                            Price = 2.1899999999999999,
                            Publisher = "Eichiro Oda",
                            Quantity = 5,
                            Title = "One piece vol 21",
                            Year = 1999
                        },
                        new
                        {
                            Id = 9,
                            Author = "Eichiro Oda",
                            CategoryId = 2,
                            Image = "op6.jpg",
                            Page = 200,
                            Price = 2.1899999999999999,
                            Publisher = "Eichiro Oda",
                            Quantity = 10,
                            Title = "One piece vol 25",
                            Year = 1999
                        },
                        new
                        {
                            Id = 10,
                            Author = "Manh Tung",
                            CategoryId = 1,
                            Image = "hor1.jpg",
                            Page = 500,
                            Price = 197.0,
                            Publisher = "Manh Tung",
                            Quantity = 1,
                            Title = "Horro1",
                            Year = 2018
                        },
                        new
                        {
                            Id = 11,
                            Author = "Manh Tung",
                            CategoryId = 1,
                            Image = "hor2.jpg",
                            Page = 10,
                            Price = 149.0,
                            Publisher = "Manh Tung",
                            Quantity = 9,
                            Title = "Monday is tomorrow vol 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 12,
                            Author = "Joker",
                            CategoryId = 1,
                            Image = "hor3.jpg",
                            Page = 10,
                            Price = 159.0,
                            Publisher = "Joker",
                            Quantity = 9,
                            Title = "Monday is tomorrow vol 2",
                            Year = 2020
                        },
                        new
                        {
                            Id = 13,
                            Author = "Vladimir Putin",
                            CategoryId = 1,
                            Image = "hor4.jpg",
                            Page = 10,
                            Price = 169.0,
                            Publisher = "Manh Tung",
                            Quantity = 10,
                            Title = "Monday is tomorrow vol 3",
                            Year = 2021
                        },
                        new
                        {
                            Id = 14,
                            Author = "Vladimir Putin",
                            CategoryId = 1,
                            Image = "hor5.jpg",
                            Page = 10,
                            Price = 169.0,
                            Publisher = "Manh Tung",
                            Quantity = 10,
                            Title = "Monday is tomorrow vol 4",
                            Year = 2022
                        },
                        new
                        {
                            Id = 15,
                            Author = "Vladimir Putin",
                            CategoryId = 1,
                            Image = "hor6.jpg",
                            Page = 10,
                            Price = 99.0,
                            Publisher = "Vladimir Putin",
                            Quantity = 10,
                            Title = "Monday is tomorrow vol 5",
                            Year = 2022
                        },
                        new
                        {
                            Id = 16,
                            Author = "Edison",
                            CategoryId = 3,
                            Image = "sc1.webp",
                            Page = 10,
                            Price = 599.0,
                            Publisher = "Edison",
                            Quantity = 100,
                            Title = "Be who you want",
                            Year = 1950
                        },
                        new
                        {
                            Id = 17,
                            Author = "Edison second",
                            CategoryId = 3,
                            Image = "sc2.webp",
                            Page = 10,
                            Price = 5999.0,
                            Publisher = "Edison",
                            Quantity = 100,
                            Title = "Beeeeeeeeeee",
                            Year = 1951
                        },
                        new
                        {
                            Id = 18,
                            Author = "PDPT",
                            CategoryId = 3,
                            Image = "sc8.webp",
                            Page = 100,
                            Price = 59.0,
                            Publisher = "Trog non",
                            Quantity = 5,
                            Title = "Hand made",
                            Year = 2002
                        },
                        new
                        {
                            Id = 19,
                            Author = "Geoper",
                            CategoryId = 3,
                            Image = "sc3.webp",
                            Page = 299,
                            Price = 29.600000000000001,
                            Publisher = "Geoper",
                            Quantity = 19,
                            Title = "Geopedia",
                            Year = 1991
                        },
                        new
                        {
                            Id = 21,
                            Author = "Sciencer",
                            CategoryId = 3,
                            Image = "sc4.webp",
                            Page = 1093,
                            Price = 225.19999999999999,
                            Publisher = "Sciencer",
                            Quantity = 3,
                            Title = "The sience of can and can't ",
                            Year = 1997
                        },
                        new
                        {
                            Id = 20,
                            Author = "zhongli",
                            CategoryId = 3,
                            Image = "sc11.webp",
                            Page = 999,
                            Price = 9999.0,
                            Publisher = "Manh Tung",
                            Quantity = 3,
                            Title = "Shape history",
                            Year = 2004
                        });
                });

            modelBuilder.Entity("FPTBook.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "18+",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 2,
                            Description = "12+",
                            Name = "Manga"
                        },
                        new
                        {
                            Id = 3,
                            Description = "everyone",
                            Name = "Science"
                        });
                });

            modelBuilder.Entity("FPTBook.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Item_Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int?>("bookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("bookId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FPTBook.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "cf20329d-9e08-430f-9610-d37eeac18257",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "customer",
                            ConcurrencyStamp = "a6b5328c-afb1-43d4-81ca-ad9dbce699fb",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "storeOwner",
                            ConcurrencyStamp = "3474018c-771a-46cd-8ae1-318cc1bd57b5",
                            Name = "StoreOwner",
                            NormalizedName = "StoreOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b992344-a757-4cf0-b7d5-b3812fa91bba",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMt1fdfJQkIoUH7PlurIAoU4QFXAJtJkGj5lIcAlsLf414YEvyR/WwoumDE7518VHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b89b10c-21f3-44f5-bcac-3d98012d53ab",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8707a02-f8cb-44f0-803a-5c25df36e35a",
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEG0kSINPB/yzS4l/OCI6Iowr3Ro7ZiEnAJb4v1b8lUgPhA97uizmwPoJwlKQhI7pkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05343659-c7a2-43b4-ad42-85992f51bd04",
                            TwoFactorEnabled = false,
                            UserName = "customer@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "149cc77d-c153-44b2-bffa-963d0e199bcf",
                            Email = "storeOwner@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELq6Mo4/c4ZDZELNLH2Q7so0FyfYliF7ggS4Xxv0UI5FRb2CUzVIGpUUfIp3HqU0kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19600d13-5dac-4798-9a44-f3e03af23a27",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6304050-2b63-43c5-84dc-b3911f4bba99",
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer2@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGjDtLnEoSSrqywmQw9r9UD7E+Dfy5F1Iie+ojg4f/P0XAGIzXyE6LXu/1bWSwgpUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a41de85a-94c9-4d16-ae72-35c08655ca3f",
                            TwoFactorEnabled = false,
                            UserName = "customer2@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92d6e533-b5c6-48d7-ac6c-22946d91f5ac",
                            Email = "storeOwner2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner2@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELLir18QmT+VA8FXz6uAgZEEuxF20JOMZGAn3VzLiaESATfhRxDFAqsWNyaheUSUJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab4a55d3-fd03-458b-b188-30902353eabd",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner2@gmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0400aecc-4830-4c49-8d79-80ea38cb1200",
                            Email = "customer3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer3@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECq5BRH6Vrkmr2DvsuLTBYW0lugsA7W+r597IIOwqvNfKMkpiSWEvbWycd9VrJEseA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18ea4c2a-218d-49f0-8f96-5e95474b4e88",
                            TwoFactorEnabled = false,
                            UserName = "customer3@gmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d922d73f-8660-4925-8928-38a8ad2c414b",
                            Email = "storeOwner3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner3@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUg+6pQPR2KqwFHpuGCl+E8D9CvArqNHU0kp5h9yxg454xBYJHeeX7i2h18n+I0YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0df6c83-0a95-4fca-8721-1775fb899347",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner3@gmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55120bc1-a9df-404e-b4f3-5df0ab5fe88a",
                            Email = "customer4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer4@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEODv7oTJk2oJfu2xt1tUOHL6/Sv6I6zsn57hQxZA9cpukUTMa+Em9UXfTrx4eQY+xA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65dd92b9-01e6-4021-b656-da93b828f80f",
                            TwoFactorEnabled = false,
                            UserName = "customer4@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fdb51df-e5d4-4b5e-8de2-1de8c68bfba4",
                            Email = "storeOwner4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner4@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAulHHJxGCtPfCNHsFSy4auw5yM0B2ZnR3/ToTqPR8M6mUthkbrUauX6kmNqa3IyEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "087e455e-e7cd-4b7a-b73d-42dab3b91b28",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner4@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5b2174c-b07e-4df0-9b79-c6e822fde2df",
                            Email = "customer5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer5@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOD2U2kZwOdCXR/gLcuWx591SIAq67ze3QhNsezYqaFw06rxmppKT4TcJBvrN/Ub6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9065d6b3-ba7a-4c84-bace-a1423b9831c0",
                            TwoFactorEnabled = false,
                            UserName = "customer5@gmail.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f6a6709-3b55-42d4-92ed-b0e005557126",
                            Email = "storeOwner5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner5@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPK7zPVuDqOWE94k1v7Yjf6BxK+OgPfVCup+CkeKsToYrea11XPVvVzSTV4aS0F0dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21670b2b-b49b-402b-a99b-5d01a593fa12",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner5@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "storeOwner"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "storeOwner"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "storeOwner"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "storeOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FPTBook.Models.Bill", b =>
                {
                    b.HasOne("FPTBook.Models.Book", "Book")
                        .WithMany("Bills")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPTBook.Models.Book", b =>
                {
                    b.HasOne("FPTBook.Models.Category", "Category")
                        .WithMany("books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPTBook.Models.Item", b =>
                {
                    b.HasOne("FPTBook.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("bookId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
